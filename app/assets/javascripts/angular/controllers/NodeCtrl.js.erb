angular.module('lawaApp')
  .controller("NodeCtrl", [
    '$scope','$http','_', '$timeout', function($scope,$http,_,$timeout) {

      $scope.setup = function(){
        // get and set up all nodes
        $http.get('/api/nodes').success(function(data){
          $scope.nodes = data;

          // find or create a respondent with session and current node data
          $http.get('/api/respondents/get_or_create/').success(function(data){
            $scope.surveySessionId = data.session_id;
            $scope.respondentId = data.respondent_id;
            $scope.setCurrentNodeById(data.current_node_id);
            $scope.variables = data.variables;
            $scope.hours_elapsed = Math.floor($scope.variables.time_elapsed / 60);
            $scope.minutes_elapsed = $scope.variables.time_elapsed % 60;
            $scope.planeProgress = $scope.calculatePlaneProgress($scope.variables.flight_time_remaining);
            $scope.currentFlightTimeRemaining = $scope.variables.landing_time;

            // if current node is the first one, don't show dashboard
            // TODO: pls no:
            if(
                $scope.currentNode.template_name === "splash" ||
                $scope.currentNode.template_name === "sq-2-2" ||
                $scope.currentNode.template_name === "sq-1" ||
                $scope.currentNode.template_name === "e-1" ||
                $scope.currentNode.template_name === "e-2" ||
                $scope.currentNode.template_name === "e-3" ||
                $scope.currentNode.template_name === "e-4" ||
                $scope.currentNode.template_name === "e-5" ||
                $scope.currentNode.template_name === "e-6" ||
                $scope.currentNode.template_name === "e-7"
              ){
              $scope.setShowDashboard(false);
            // else if the home dashboard should be seen, show that.
            } else {
              $scope.setShowDashboard(true);
            };

            ///////////
              // for development purposes only. add fully-working nodes here
              // to remove debugging printing out on front end:
              $scope.nodesWorking = [
                // add the clean template name, like this:
                '/assets/partials/splash.html',
                '/assets/partials/sq-2-2.html',
                '/assets/partials/sq-1.html',
                '/assets/partials/dp-1.html',
                '/assets/partials/a-1.html',
                '/assets/partials/a-2.html',
                '/assets/partials/dp-2.html',
                '/assets/partials/dp-3.html',
                '/assets/partials/b-1.html',
                '/assets/partials/b-2.html',
                '/assets/partials/b-3.html',
                '/assets/partials/dp-5.html',
                '/assets/partials/b-4.html',
                '/assets/partials/c-1.html',
                '/assets/partials/c-2.html',
                '/assets/partials/c-4.html',
                '/assets/partials/dp-7.html',
                '/assets/partials/dp-6.html',
                '/assets/partials/dp-10.html',
                '/assets/partials/dp-11.html',
                '/assets/partials/dp-8.html',
                '/assets/partials/e-1.html',
                '/assets/partials/e-2.html',
                '/assets/partials/e-3.html',
                '/assets/partials/e-4.html',
                '/assets/partials/e-5.html',
                '/assets/partials/e-6.html',
                '/assets/partials/itf-2.html',
                '/assets/partials/no-itf-1.html',
                '/assets/partials/ns-5.html',
                '/assets/partials/ns-4.html'
              ];
              $scope.inWhitelist = $scope.nodeIncludedInWhitelist($scope.getTemplateName($scope.currentNode.node_id));
            ///////////template_name

            $scope.variables["text_from"] = null;
            if($scope.variables.original_who_picking_up === "Coworker"){
              $scope.variables.text_from = "Mr. Manager";
            }else if($scope.variables.original_who_picking_up === "Friend"){
              $scope.variables.text_from = "Best Friend";
            }else if($scope.variables.original_who_picking_up === "Parent"){
              $scope.variables.text_from = "Mom";
            };

            if($scope.variables.luggage_count > 1){
              $scope.variables.luggage_type = $scope.variables.luggage_type + 's';
            }
            if($scope.variables.picking_up_number > 1){
              $scope.variables.original_who_picking_up = $scope.variables.original_who_picking_up + 's';
            }

            var time = new Date();
            $scope.currentTime = time.toLocaleTimeString(
                'en-US', { hour12: true, hour:"numeric", minute:"numeric"}
              );

            var oneHourAhead = new Date();
            oneHourAhead.setTime(oneHourAhead.getTime() + (60*60*1000));
            $scope.oneHourFromNow = oneHourAhead.toLocaleTimeString(
                'en-US', { hour12: true, hour:"numeric", minute:"numeric"}
              );


            var tenMinutesBack = new Date();
            tenMinutesBack.setTime(tenMinutesBack.getTime() - (10*60*1000));
            $scope.tenMinutesAgo = tenMinutesBack.toLocaleTimeString(
                'en-US', { hour12: true, hour:"numeric", minute:"numeric"}
              );
          })

          $scope.currentDecisionDestination = null;
          $scope.currentAnswers = [];
          $scope.currentOther = {
            present: false,
            text: null, answerId: null
          };
          $scope.currentTimeInterval = 0;

          $scope.parkingTimeSpent = 5;
          $scope.parkingTextOutcome = ["Nope, no parking", "This lot's all full", "Completely packed", "None here either", "No spaces", "Can't fit there"];
          $scope.parkingTextIndex = 0;
        });

        $scope.signColors = {
          1: 'blue',
          2: 'indigo',
          3: 'purple',
          4: 'magenta'
        }

        $scope.amenities = [];
      };

      $scope.restart = function(){
        // TODO: post to some api restart route that clears cookies, etc.
      }
      $scope.nodeIncludedInWhitelist = function(template_name){
        return _.contains($scope.nodesWorking, template_name);
      };

      $scope.findDecisionByString = function(string){
        var spunDecision = _.where($scope.currentNode.decisions, {decision: string})
        $scope.setCurrentDecisionNoSubmit(spunDecision[0]);
        return spunDecision[0];
      }

      $scope.findAnswerByString = function(string){
        var foundAnswer = _.where($scope.currentNode.answers, {answer: string})
        // do something with it
        // $scope.setCurrentDecisionNoSubmit(spunDecision[0]);
        return foundAnswer[0];
      }

      $scope.calculatePlaneProgress = function(flightTimeRemaining){
        // min 0, max 85
        // our max = variables.landing_time
        // 85 / landing_time = modifier for adding to our time
        $scope.flightTimeModifier = 85 / $scope.variables.landing_time;
        var calculatedTimeRemaining = 85 - (flightTimeRemaining * $scope.flightTimeModifier);
        return Math.min(85, calculatedTimeRemaining);
      }

      $scope.matchAnswerString = function(answer, string){
        return (answer.answer.indexOf(string) > -1)
      }

      $scope.setShowDashboard = function(value){
        $scope.showDashboard = value;
      }

      $scope.setCurrentNodeBySession = function() {
        $scope.currentNode = $scope.fetchNodeById(sessionCurrentNodeId);
      };

      $scope.fetchNodeById = function(nodeId){
        var currentNode = _.where($scope.nodes, {node_id: nodeId});
        return currentNode[0];
      };

      $scope.setCurrentNodeById = function(nodeId){
        $scope.currentNode = $scope.fetchNodeById(nodeId);
        $scope.currentTemplateName = $scope.getTemplateName(nodeId);
        // set default for gps questions
        if ($scope.currentNode.template_name === "dp-1") {
          var curbGpsDecision = _.findWhere($scope.currentNode.decisions, {decision: "Default view"});
          $scope.setCurrentDecisionNoSubmit(curbGpsDecision);
          $scope.addOneToCircling();
        } else if($scope.currentNode.template_name === "dp-6"){
          var curbGpsDecision = _.findWhere($scope.currentNode.decisions, {decision: "Hope to catch your passenger at the curb"});
          $scope.setCurrentDecisionNoSubmit(curbGpsDecision);
          $scope.addOneToCircling();
        } else if($scope.currentNode.template_name === "dp-3"){
          var curbGpsDecision = _.findWhere($scope.currentNode.decisions, {decision: "Continue circling around terminal"});
          $scope.setCurrentDecisionNoSubmit(curbGpsDecision);
          $scope.addOneToCircling();
        }
      };

      $scope.thisDecisionIsSelected = function(decision){
        return $scope.currentDecision === decision
      };

      $scope.setCurrentDecision = function(decision){
        $scope.currentDecisionDestination = $scope.fetchNodeById(decision.destination_node_id);
        $scope.submit(decision.id, true);
      };

      $scope.setCurrentDecisionNoSubmit = function(decision){
        $scope.currentDecision = decision;
        $scope.currentDecisionDestination = $scope.fetchNodeById(decision.destination_node_id);
      };

      $scope.setCurrentlyConsideredAmenity = function(answer){
        // do nothing if already have three amenities:
        if($scope.amenities.length === 3){
          return;
        }else{
          // this will be triggerd on the "nah" X of the confirm popup:
          if(answer === null){
            $scope.currentlyConsideredAmenity = answer;
            return;
          }
          if (_.findWhere($scope.amenities, answer)){
            return;
          }else{
            $scope.currentlyConsideredAmenity = answer;
          }
        }
      };

      // show numbers 1, 2, 3
      $scope.addToAmenities = function(answer){
        $scope.setCurrentlyConsideredAmenity(null);
        // if user is clicking an empty circle:
        if(answer === null || answer === undefined){
          return;
        };
        if($scope.amenities.length === 3){
          if (_.findWhere($scope.amenities, answer)){
            // amenity is already in current list, remove it.
            $scope.amenities = _.without($scope.amenities, _.findWhere($scope.amenities, answer));
          }
          // if it's not in the list, don't do anything
          return
        }else{
          // add it if it's not present
          if (_.findWhere($scope.amenities, answer)){
            // amenity is already in current list, remove it.
            $scope.amenities = _.without($scope.amenities, _.findWhere($scope.amenities, answer));
          } else {
            $scope.amenities.push(answer);
          }
        }
      };

      $scope.incrementOutcome = function(){
        $scope.parkingTimeSpent += 5;

        if($scope.parkingTextIndex <= 4)
          $scope.parkingTextIndex += 1
        else
          $scope.parkingTextIndex = 0;
      };

      $scope.addAmenitiesToAnswers = function(){
        $scope.currentAnswers = $scope.amenities;
      };

      $scope.addMultipleChoice = function(answer){
        if (_.findWhere($scope.currentAnswers, answer)){
          // answer is already in current list, remove it.
          $scope.currentAnswers = _.without($scope.currentAnswers, _.findWhere($scope.currentAnswers, answer));
        } else {
          $scope.currentAnswers.push(answer);
        }
      };

      $scope.addSingleChoice = function(answer){
        $scope.currentAnswers = [answer];
      };

      $scope.addRankedChoice = function(answer, rank) {
        //TODO: Remove this
        if (_.findWhere($scope.currentAnswers, answer)){
          // answer is already in current list, remove it.
          $scope.currentAnswers = _.without($scope.currentAnswers, _.findWhere($scope.currentAnswers, answer));
        } else {
          $scope.currentAnswers.push(answer);
        }
      }

      // wrapper for all above answer selection options:
      $scope.addAnswerToCurrentAnswers = function(answer, rank){
        if($scope.currentNode.question.question_type === "select-one") {
          $scope.addSingleChoice(answer);
        } else if ($scope.currentNode.question.question_type === "select-multiple") {
          $scope.addMultipleChoice(answer);
        } else if ($scope.currentNode.question.question_type === "rank") {
          $scope.addRankedChoice(answer, rank);
        };
      };

      // if experience should move on without 'submit' button:
      $scope.immediateSubmitAnswer = function(answer, timeAdvanceBoolean){
        // if boolean argument is left out, advance time by default.
        // only passing in 'false' is useful
        if(timeAdvanceBoolean === undefined){
          var timeAdvanceBoolean = true;
        };
        $scope.addAnswerToCurrentAnswers(answer);
        $scope.submit(null, timeAdvanceBoolean);
      };

      // for freeform responses:
      $scope.determineOtherText = function(currentOtherText, answerId) {
        if($scope.currentOtherText === null){
          $scope.currentOther.present = false;
        }else if (currentOtherText.length === 0){
          $scope.currentOther.present = false;
        }else{
          $scope.currentOther.present = true;
          $scope.currentOther.answerId = answerId;
        };
      };

      $scope.addTimesCircled = function(circleAmount) {
        $scope.variables.times_circled = Math.max(0, ($scope.variables.times_circled += circleAmount));
        $scope.addSingleChoice($scope.currentNode.answers[0])
        $scope.determineOtherText($scope.variables.times_circled, $scope.currentAnswers[0].id);
        $scope.currentOther.text = $scope.variables.times_circled;
      }

      $scope.addOneToCircling = function(){
        $scope.variables.times_circled += 1;
      }

      $scope.addTimeElapsed = function(elapsedAmount) {
        // this one doesn't actually change the time_elapsed variable in the session,
        // it only posts the change to the responses api so we can record it for 
        // survey puposes. it's good to keep both to compare
        if($scope.adjustedTimeElapsed === undefined){
          $scope.adjustedTimeElapsed = Math.max(0, ($scope.variables.time_elapsed + elapsedAmount));
        }else{
          $scope.adjustedTimeElapsed = Math.max(0, ($scope.adjustedTimeElapsed += elapsedAmount));
        };
          $scope.addSingleChoice($scope.currentNode.answers[0])
          $scope.determineOtherText($scope.adjustedTimeElapsed, $scope.currentAnswers[0].id);
          $scope.currentOther.text = $scope.adjustedTimeElapsed;
      }

      $scope.addTimeInterval = function(timeAmount) {
        if($scope.currentTimeInterval >= 0){
          $scope.currentTimeInterval = Math.max(0, ($scope.currentTimeInterval += timeAmount));
          $scope.addSingleChoice($scope.currentNode.answers[0])
          $scope.determineOtherText($scope.currentTimeInterval, $scope.currentAnswers[0].id);
          $scope.currentOther.text = $scope.currentTimeInterval;
        };
      }

      // a bunch of things to do in between nodes:
      $scope.goToNextNode = function(){
        if(!$scope.currentNode.is_decision_point){
          // go to next node based on current Q's destination
          var destinationNodeId = $scope.currentNode.next_node_id;
        }else if($scope.currentNode.is_decision_point){
          // go to node based on decision
          var destinationNodeId = $scope.currentDecisionDestination.node_id;
        }

        $scope.setCurrentNodeById(destinationNodeId);

        // clear decision prepping for next question (can move to own method)
        $scope.currentDecisionDestination = null;
        $scope.currentDecision = null;
        // clear answers prepping for next question (can move into above-mentioned)
        $scope.currentAnswers = [];
        $scope.currentOther.present = false;
        $scope.currentOther.text = null;
        $scope.currentOther.answerId = null;
        $scope.currentTimeInterval = 0;

        //for debugging:
        $scope.inWhitelist = $scope.nodeIncludedInWhitelist($scope.getTemplateName($scope.currentNode.node_id));


        // TODO: this is gross and should be handled in a better way. not least of all
        //       because it needs to be replicated up in the setup in the case of reloads
        // set default for gps question and other templates-specific settings
        if ($scope.currentNode.template_name === "dp-1") {
          var curbGpsDecision = _.findWhere($scope.currentNode.decisions, {decision: "Default view"});
          $scope.setCurrentDecisionNoSubmit(curbGpsDecision);
          $scope.addOneToCircling();
        } else if ($scope.currentNode.template_name === "dp-6"){
          var curbGpsDecision = _.findWhere($scope.currentNode.decisions, {decision: "Hope to catch your passenger at the curb"});
          $scope.setCurrentDecisionNoSubmit(curbGpsDecision);
          $scope.addOneToCircling();
        } else if($scope.currentNode.template_name === "dp-3"){
          var curbGpsDecision = _.findWhere($scope.currentNode.decisions, {decision: "Continue circling around terminal"});
          $scope.setCurrentDecisionNoSubmit(curbGpsDecision);
          $scope.addOneToCircling();
        } else if($scope.currentNode.template_name === "e-1"){
          $scope.setShowDashboard(false);
        }
      };

      var answersForParams = function(answersArray) {
        return _.map(answersArray, function(answerObject){
          return {
            id: answerObject.id
          }
        })
      }

      $scope.submit = function(decisionId, decreaseTime){
        // console.log('flight time remaining variable: '+ $scope.variables.flight_time_remaining);
        // console.log('calculated plane progress: '+ $scope.planeProgress);
        // user doesn't add time to time elapsed guess, but we need to record the answer anyway:

        if($scope.currentNode.template_name === 'e-3' && $scope.adjustedTimeElapsed === undefined){
          $scope.addTimeElapsed(0);
        }

        // time should count down for plane landing and up for total time elapsed
        // for this submit click:
        if(decreaseTime){
          $scope.variables.time_elapsed += 5;
          $scope.variables.flight_time_remaining -= 5
          $scope.hours_elapsed = Math.floor($scope.variables.time_elapsed / 60);
          $scope.minutes_elapsed = $scope.variables.time_elapsed % 60;
          $scope.planeProgress = $scope.calculatePlaneProgress($scope.variables.flight_time_remaining);
        };

        // there is a freeform_response for this submit click:
        if($scope.currentOther.present){
          var freeformResponse = $scope.currentOther.text;
          var freeformAnswerId = $scope.currentOther.answerId;
        }else {
          var freeformResponse = null;
        };

        // set up params for posting:
        var paramSafeAnswers = answersForParams($scope.currentAnswers);
        var responseParams = {
          is_decision: $scope.currentNode.is_decision_point,
          respondent_id: $scope.respondentId,
          node_id: $scope.currentNode.node_id,
          decision_id: decisionId || null,
          answers: paramSafeAnswers || null,
          next_node_id: $scope.currentNode.next_node_id || $scope.currentDecisionDestination.node_id,
          freeform_response: { response: freeformResponse, answer_id: freeformAnswerId } || null
        }
        var respondentParams = {
          time_elapsed: $scope.variables.time_elapsed,
          flight_time_remaining: $scope.variables.flight_time_remaining,
          times_circled: $scope.variables.times_circled
        }
        $http.post('/api/response', { response: responseParams }).success(function(data){
          // post to response to API and then on success update session flight information:
          $http.post('/api/respondents/update', respondentParams).success(function(){
            // finally, go to the next node:
            $scope.goToNextNode();
          })
        });
      };

      $scope.delaySubmit = function(decisionId, decreaseTime){
        _.delay($scope.submit, 800, decisionId, decreaseTime);
      }

      // set up object with all template names from database:
      var templates = {}
      <% Node.all.each do |node| %>
          <% if !node.is_decision_point %>
            <%= "templates['#{node.id}'] = {template: '#{asset_path "partials/#{node.clean_template_name}.html"}'}" %>
          <% elsif node.is_decision_point %>
            <%= "templates['#{node.id}'] = {template: '#{asset_path "partials/#{node.clean_template_name}.html"}'}" %>
          <% end %>
      <% end %>

      $scope.getTemplateName = function(nodeId){
        return templates[nodeId].template;
      }

      var iconPaths = {}
      <% Answer.all.each do |a| %>
        <%= "iconPaths['#{a.id}'] = {iconPath: '#{asset_path "svgs/_#{a.icon_name}.html"}'}" %>
      <% end%>

      $scope.getAnswerIconPath = function(answerId){
        return iconPaths[answerId].iconPath;
      }
      

      //get all icon paths for answers
      // go through all answers in RUBY, create an icon path from their icon-name
      // follow pattern of above of adding answer by id with icon_path
      // create function like above for answer icon path by answerId

      $scope.setup();
    }
  ])
