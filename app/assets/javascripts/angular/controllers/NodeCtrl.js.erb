angular.module('lawaApp')
  .controller("NodeCtrl", [
    '$scope','$http','_', function($scope,$http,_) {

      $scope.setup = function(){
        // get and set up all nodes
        $http.get('/api/nodes').success(function(data){
          $scope.nodes = data;


          // find or create a respondent with session and current node data
          $http.get('/api/respondents/get_or_create/').success(function(data){
            $scope.surveySessionId = data.session_id;
            $scope.respondentId = data.respondent_id;
            $scope.setCurrentNodeById(data.current_node_id);
            $scope.variables = data.variables;

            ///////////
              // for development purposes only. add fully-working nodes here
              // to remove debugging printing out on front end:
              $scope.nodesWorking = [
                // add the clean template name, like this:
                '/assets/partials/sq-2-2.html',
                '/assets/partials/sq-1.html',
                '/assets/partials/dp-1.html',
                '/assets/partials/a-1.html',
                '/assets/partials/a-2.html',
                '/assets/partials/dp-2.html',
                '/assets/partials/b-1.html',
                '/assets/partials/b-2.html',
                '/assets/partials/b-3.html',
                '/assets/partials/dp-5.html',
                '/assets/partials/b-4.html'
              ];
              $scope.inWhitelist = $scope.nodeIncludedInWhitelist($scope.getTemplateName($scope.currentNode.node_id));
            ///////////

            $scope.variables["text_from"] = null;
            if($scope.variables.original_who_picking_up === "Coworker"){
              $scope.variables.text_from = "Mr. Manager";
            }else if($scope.variables.original_who_picking_up === "Friend"){
              $scope.variables.text_from = "Best Friend";
            }else if($scope.variables.original_who_picking_up === "Parent"){
              $scope.variables.text_from = "Mom";
            };

            if($scope.variables.luggage_count > 1){
              $scope.variables.luggage_type = $scope.variables.luggage_type + 's';
            }
            if($scope.variables.picking_up_number > 1){
              $scope.variables.original_who_picking_up = $scope.variables.original_who_picking_up + 's';
            }

            var time = new Date();
            $scope.currentTime = time.toLocaleTimeString(
                'en-US', { hour12: true, hour:"numeric", minute:"numeric"}
              );

            var oneHourAhead = new Date();
            oneHourAhead.setTime(oneHourAhead.getTime() + (60*60*1000));
            $scope.oneHourFromNow = oneHourAhead.toLocaleTimeString(
                'en-US', { hour12: true, hour:"numeric", minute:"numeric"}
              );

            var tenMinutesBack = new Date();
            tenMinutesBack.setTime(tenMinutesBack.getTime() - (10*60*1000));
            $scope.tenMinutesAgo = tenMinutesBack.toLocaleTimeString(
                'en-US', { hour12: true, hour:"numeric", minute:"numeric"}
              );

          })

          $scope.currentDecisionDestination = null;
          $scope.currentAnswers = [];
          $scope.currentOther = {
            present: false,
            text: null,
            answerId: null
          };
          $scope.currentTimeInterval = 0;
        });

      };

      $scope.nodeIncludedInWhitelist = function(template_name){
        return _.contains($scope.nodesWorking, template_name);
      };

      $scope.findDecisionByString = function(string){
        var spunDecision = _.where($scope.currentNode.decisions, {decision: string})
        $scope.setCurrentDecisionNoSubmit(spunDecision[0]);
        return spunDecision[0];
      }

      $scope.findAnswerByString = function(string){
        var foundAnswer = _.where($scope.currentNode.answers, {answer: string})
        // do something with it
        // $scope.setCurrentDecisionNoSubmit(spunDecision[0]);
        return foundAnswer[0];
      }

      $scope.matchAnswerString = function(answer, string){
        return (answer.answer.indexOf(string) > -1)
      }

      $scope.setCurrentNodeBySession = function() {
        $scope.currentNode = $scope.fetchNodeById(sessionCurrentNodeId);
      };

      $scope.fetchNodeById = function(nodeId){
        var currentNode = _.where($scope.nodes, {node_id: nodeId});
        return currentNode[0];
      };

      $scope.setCurrentNodeById = function(nodeId){
        $scope.currentNode = $scope.fetchNodeById(nodeId);
        $scope.currentTemplateName = $scope.getTemplateName(nodeId);
      };

      $scope.setCurrentDecision = function(decision){
        $scope.currentDecisionDestination = $scope.fetchNodeById(decision.destination_node_id);
        $scope.submit(decision.id);
      };

      $scope.setCurrentDecisionNoSubmit = function(decision){
        $scope.currentDecision = decision;
        $scope.currentDecisionDestination = $scope.fetchNodeById(decision.destination_node_id);
      };

      $scope.addMultipleChoice = function(answer) {
        if (_.findWhere($scope.currentAnswers, answer)){
          // answer is already in current list, remove it.
          $scope.currentAnswers = _.without($scope.currentAnswers, _.findWhere($scope.currentAnswers, answer));
        } else {
          $scope.currentAnswers.push(answer);
        }
      };

      $scope.addSingleChoice = function(answer) {
        $scope.currentAnswers = [answer];
      };

      $scope.addRankedChoice = function(answer, rank) {
        //TODO: need function for rank
        debugger;
      }

      $scope.determineOtherText = function(currentOtherText, answerId) {
        if($scope.currentOtherText === null){
          $scope.currentOther.present = false;
        }else if (currentOtherText.length === 0){
          $scope.currentOther.present = false;
        }else{
          $scope.currentOther.present = true;
          $scope.currentOther.answerId = answerId;
        };
      };

      $scope.addTimeInterval = function(timeAmount) {
        if($scope.currentTimeInterval >= 0){
          $scope.currentTimeInterval = Math.max(0, ($scope.currentTimeInterval += timeAmount))
          $scope.addSingleChoice($scope.currentNode.answers[0])
          $scope.determineOtherText($scope.currentTimeInterval, $scope.currentAnswers[0].id);
          $scope.currentOther.text = $scope.currentTimeInterval;
        };
      }

      $scope.addAnswerToCurrentAnswers = function(answer, rank){
        if($scope.currentNode.question.question_type === "select-one") {
          $scope.addSingleChoice(answer);
        } else if ($scope.currentNode.question.question_type === "select-multiple") {
          $scope.addMultipleChoice(answer);
        } else if ($scope.currentNode.question.question_type === "rank") {
          $scope.addRankedChoice(answer, rank);
        };
      };

      $scope.goToNextNode = function(){
        if(!$scope.currentNode.is_decision_point){
          // go to next node based on current Q's destination
          var destinationNodeId = $scope.currentNode.next_node_id;
        }else if($scope.currentNode.is_decision_point){
          // go to node based on decision
          var destinationNodeId = $scope.currentDecisionDestination.node_id;
        }

        $scope.setCurrentNodeById(destinationNodeId);

          // clear decision prepping for next question (can move to own method)
          $scope.currentDecisionDestination = null;
          $scope.currentDecision = null;
          // clear answers prepping for next question (can move into above-mentioned)
          $scope.currentAnswers = [];
          $scope.currentOther.present = false;
          $scope.currentOther.text = null;
          $scope.currentOther.answerId = null;

          //for debugging:
          $scope.inWhitelist = $scope.nodeIncludedInWhitelist($scope.getTemplateName($scope.currentNode.node_id));
      };

      var answersForParams = function(answersArray) {
        return _.map(answersArray, function(answerObject){
          return {
            id: answerObject.id
          }
        })
      }

      $scope.submit = function(decisionId){
        if($scope.currentOther.present){
          var freeformResponse = $scope.currentOther.text;
          var freeformAnswerId = $scope.currentOther.answerId;
        }else {
          var freeformResponse = null;
        };

        var paramSafeAnswers = answersForParams($scope.currentAnswers);
        var params = {
          is_decision: $scope.currentNode.is_decision_point,
          respondent_id: $scope.respondentId,
          node_id: $scope.currentNode.node_id,
          decision_id: decisionId || null,
          answers: paramSafeAnswers || null,
          next_node_id: $scope.currentNode.next_node_id || $scope.currentDecisionDestination.node_id,
          freeform_response: { response: freeformResponse, answer_id: freeformAnswerId } || null
        }
        $http.post('/api/response', { response: params }).success(function(data){
          // post to API and then on success:
          $scope.goToNextNode();
        });
      };

      $scope.getMinigameName = function(area){
          return minigames[area.minigame_type_id].name;
      };

      var templates = {}
      <% Node.all.each do |node| %>
          <% if !node.is_decision_point %>
            <%= "templates['#{node.id}'] = {template: '#{asset_path "partials/#{node.clean_template_name}.html"}'}" %>
          <% elsif node.is_decision_point %>
            <%= "templates['#{node.id}'] = {template: '#{asset_path "partials/#{node.clean_template_name}.html"}'}" %>
          <% end %>

      <% end %>

      $scope.getTemplateName = function(nodeId){
        return templates[nodeId].template;
      }

      $scope.setup();
    }
  ])
